version: '3.8'

services:
  # Main Gemini Coding Factory service
  gemini-factory:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gemini-coding-factory
    restart: unless-stopped
    volumes:
      # Workspace for repository storage
      - workspace:/workspace
      # Configuration and logs
      - ./logs:/var/log/gemini-factory
      # Playwright cache
      - playwright_cache:/home/gemini/.cache/ms-playwright
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - WORKSPACE_ROOT=/workspace
      - PORT=3000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - AUTHORIZED_USERS=${AUTHORIZED_USERS:-wjorgensen}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    networks:
      - gemini-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development environment (for local testing)
  gemini-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: gemini-factory-dev
    volumes:
      - ./:/app
      - workspace_dev:/workspace
      - node_modules_dev:/app/node_modules
      - playwright_cache:/home/gemini/.cache/ms-playwright
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - WORKSPACE_ROOT=/workspace
      - PORT=3000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - AUTHORIZED_USERS=${AUTHORIZED_USERS:-wjorgensen}
      - LOG_LEVEL=debug
    command: npm run dev
    networks:
      - gemini-network
    profiles:
      - dev

  # Monitoring dashboard (optional)
  dashboard:
    image: nginx:alpine
    container_name: gemini-dashboard
    volumes:
      - ./dashboard:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      - gemini-factory
    networks:
      - gemini-network
    profiles:
      - monitoring

  # Redis for job queue (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: gemini-redis
    volumes:
      - redis_data:/data
    networks:
      - gemini-network
    profiles:
      - queue

  # PostgreSQL for persistent storage (future enhancement)
  postgres:
    image: postgres:15-alpine
    container_name: gemini-postgres
    environment:
      POSTGRES_DB: gemini_factory
      POSTGRES_USER: gemini
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gemini-network
    profiles:
      - database

networks:
  gemini-network:
    driver: bridge

volumes:
  # Production workspace
  workspace:
    driver: local
  # Development workspace  
  workspace_dev:
    driver: local
  # Node modules for development
  node_modules_dev:
    driver: local
  # Playwright browser cache
  playwright_cache:
    driver: local
  # Database storage
  redis_data:
    driver: local
  postgres_data:
    driver: local

# Usage:
# Production:     docker-compose up -d
# Development:    docker-compose --profile dev up
# With monitoring: docker-compose --profile monitoring up -d
# With queue:     docker-compose --profile queue up -d
# With database:  docker-compose --profile database up -d
# Full stack:     docker-compose --profile dev --profile monitoring --profile queue up 